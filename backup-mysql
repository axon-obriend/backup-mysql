#!/bin/bash
set +x


#####
backup_mysql_error () {
#####

  case "$1" in
    1)
      do_log error "Error code $1. Exiting."
      ;;
  esac
  exit $1

}


#####
backup_mysql_get_defaults () {
#####

  ERR=0
  DUMPDATE=`date +"%Y%m%d.%H%M"`
  VERBOSE=-v
  BACKUPLOCATION=~/Backups/mysql/latest
  BACKUPFILE='$DB-$DUMPDATE.sql'
  MYSQLDUMP_CMD=`which mysqldump` || backup_mysql_error
  MYSQLDUMP_CNF=~/.my.cnf
  MYSQLDUMP_OPTS="--routines --triggers"
  MYSQLDUMP_INCLUDE=""
  MYSQLDUMP_EXCLUDE="mysql information_schema performance_schema phpmyadmin local_drupal_cms local_drupal_crm"
  ARCHIVE=1
  ARCHIVELOCATION=${BACKUPLOCATION%/latest}
  ARCHIVEFILE=mysql-$DUMPDATE.tgz
  ARCHIVES_TO_KEEP=4
  DIR=`pwd`
  SED_CMD=`which gsed` || SED_CMD=`which sed` || backup_mysql_error

  # Read a system-wide or per-user config if one exists
  [ -f /etc/default/backup-mysql ] && . /etc/default/backup-mysql
  [ -f ~/.config/backup-mysql ]    && . ~/.config/backup-mysql

  [ ! -z "$MYSQLDUMP_CNF" ] && MYSQLDUMP_CNF="--defaults-extra-file=$MYSQLDUMP_CNF"

}

#####
backup_mysql_parse_opts () {
#####

  while [ $# -gt 0 ]; do
    case "$1" in
      -d|--debug)
        set -x
        ;;
      -n|--no-archive)
        ARCHIVE=0
        ;;
      -l|--location)
        BACKUPLOCATION=$2
        ;;
      -o|--outfile)
         ARCHIVEFILE=$2
        ;;
      -k|--keep)
        ARCHIVES_TO_KEEP=$2
        ;;
      -s|--silent)
        VERBOSE=
        ;;
      -h|--help)
        echo "Usage: backup-mysql [ <options> ]"
        echo "   Options:"
        echo "      -s | --silent (do not display progress messages)"
        echo "      -n | --no-archive (do not create archive of dumped databases)"
        echo "      -l <path> | --location <path> (path to store dumps and archive)"
        echo "      -k # | --keep # (number of archives to keep; delete older)"
        echo "      -o <filename> | --outfile <filename> (name of archive file)"
        exit 0
        ;;
    esac
    shift
  done
  [[ "$VERBOSE" ]] && VERBOSE="-v"
}


### do_log
### Outputs a log message
### Usage:
###   do_log error|warning|info "A message"
###
do_log() {
  LEVEL=$1
  shift
  MSG="$MYSELF $*"
  case $LEVEL in
    err|error)
      MSG="*ERROR* $MSG"
      ;;
    warn|warning)
      MSG="WARNING: $MSG"
      ;;
    info|notice)
      ;;
  esac
  echo "`date` $MSG"
  test -x /bin/logger && /bin/logger $LOGGER_ID --priority syslog.notice "$MSG"

}


#####
backup_mysql_get_list () {
#####

  [[ -z $MYSQLDUMP_INCLUDE ]] && MYSQLDUMP_INCLUDE="`echo $(mysql $MYSQLDUMP_CNF -B -N -e 'show databases' )` %%END%%"

  INCLUDE_LIST=''
  while [ "$MYSQLDUMP_INCLUDE" != "%%END%%" ]; do
    DB=${MYSQLDUMP_INCLUDE%% *}
    for X in $MYSQLDUMP_EXCLUDE; do
      [[ ! -z $DB ]] && [[ $DB == $X ]] && DB=''
    done
    [[ ! -z $DB ]] && INCLUDE_LIST="$INCLUDE_LIST $DB"
    MYSQLDUMP_INCLUDE=${MYSQLDUMP_INCLUDE#* }
  done

  if [[ ! $MYSQLDUMP_INCLUDE ]]; then
    # Nothing to do
    backup_mysql_error 0
  fi

}


#####
backup_mysql_do_backup () {
#####

  for DB in $INCLUDE_LIST; do
    BF=$(eval echo "$BACKUPFILE")
    [[ "$VERBOSE" ]] && do_log info "Backing up $DB into $BACKUPLOCATION/$BF"
    $MYSQLDUMP_CMD $MYSQLDUMP_CNF $MYSQLDUMP_OPTS $DB > "$BACKUPLOCATION/$BF"
    let "ERR = ERR + $?"
    [[ $ERR ]] && backup_mysql_cleanup $BACKUPLOCATION/$BF
  done

}


#####
backup_mysql_cleanup () {
#####
  X=${1:-$ARCHIVELOCATION/$ARCHIVEFILE}
  D=$( dirname $X )
  N=$( basename $X )

  [[ -d "$D" ]] || { do_log error "backup_mysql_cleanup: Directory does not exist" ; return 1 ; }
  [[ $ARCHIVES_TO_KEEP -eq "0" ]] && return 0

  PATTERN=${N//[0-9]/?}

  pushd $D > /dev/null
  FILES=(`ls -t $PATTERN`)  # Files matching pattern, oldest to newest
  if [ $? -eq 0 ]; then
    # We found some

    FILES=(${FILES[@]})
    for F in ${FILES[@]:$ARCHIVES_TO_KEEP}; do
      [ -w "${F}" ] && rm "${F}"
    done

  else

    do_log error "backup_mysql_cleanup: No files match pattern"
    exit 1

  fi

  popd > /dev/null

}


#####
# The juicy bits
#####

backup_mysql_get_defaults
backup_mysql_parse_opts
backup_mysql_get_list

mkdir -p $BACKUPLOCATION

# back up all the mysql databases into individual files so we can later restore
# them separately if needed
if [[ ERR -ne 0 ]]; then

  do_log error "Something went wrong"
  exit $ERR

else

  backup_mysql_do_backup

  if [[ ERR -ne 0 ]]; then
    do_log error "creating database dumps: No archive created"
  else
    if [[ ARCHIVE -eq 1 ]]; then
      [[ "$VERBOSE" ]] && do_log info "Creating archive of backups in $ARCHIVELOCATION/$ARCHIVEFILE.tgz"
      mkdir -p $ARCHIVELOCATION
      pushd $BACKUPLOCATION > /dev/null
      tar $VERBOSE -czf $ARCHIVELOCATION/$ARCHIVEFILE *.${BACKUPFILE##*.}
      backup_mysql_cleanup $ARCHIVELOCATION/$ARCHIVEFILE
      popd > /dev/null
    fi
  fi

fi

