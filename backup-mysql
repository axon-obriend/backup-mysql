#!/bin/bash
set +x


#####
backup_mysql_error () {
#####

  case "$1" in
  	  1)
  		echo -n "Error code $1 "
  		;;
  esac
  echo "exiting"
  exit $1

}


#####
backup_mysql_get_defaults () {
#####

  ERR=0
  BACKUPLOCATION=~/Backups/mysql
  MYSQLDUMP_CMD=`which mysqldump` || backup_mysql_error
  MYSQLDUMP_OPTS="--defaults-extra-file=~/.my.cnf --routines --triggers"
  MYSQLDUMP_INCLUDE=""
  MYSQLDUMP_EXCLUDE="mysql information_schema performance_schema phpmyadmin local_drupal_cms local_drupal_crm"
  ARCHIVE=1
  ARCHIVEFILE=mysql-`date +"%Y%m%d.%H%M"`
  ARCHIVES_TO_KEEP=4
  VERBOSE=-v
  DIR=`pwd`
  SED_CMD=`which gsed` || SED_CMD=`which sed` || backup_mysql_error

  # Read a system-wide or per-user config if one exists
  [ -f /etc/default/backup-mysql ] && . /etc/default/backup-mysql
  [ -f ~/.config/backup-mysql ]    && . ~/.config/backup-mysql

}

#####
backup_mysql_parse_opts () {
#####

  while [ $# -gt 0 ]; do
  	case "$1" in
  	  -d|--debug)
  		set -x
  		;;
  	  -n|--no-archive)
  		ARCHIVE=0
  		;;
  	  -l|--location)
  		BACKUPLOCATION=$2
  		;;
  	  -o|--outfile)
  		ARCHIVEFILE=$2
  		;;
  	  -k|--keep)
  		ARCHIVES_TO_KEEP=$2
  		;;
  	  -s|--silent)
  		VERBOSE=
  		;;
  	  -h|--help)
  		echo "Usage: backup-mysql [ <options> ]"
  		echo "   Options:"
  		echo "      -s | --silent (do not display progress messages)"
  		echo "      -n | --no-archive (do not create archive of dumped databases)"
  		echo "      -l <path> | --location <path> (path to store dumps and archive)"
  		echo "      -o <filename> | --outfile <filename> (name of archive file)"
  		exit 0
  		;;
  	esac
  	shift
  done
}


#####
backup_mysql_get_list () {
#####

  [[ -z $MYSQLDUMP_INCLUDE ]] && MYSQLDUMP_INCLUDE=`mysql --defaults-extra-file=~/.my.cnf -B -N -e "show databases"`
  for X in $MYSQLDUMP_EXCLUDE; do
    MYSQLDUMP_INCLUDE=`echo $MYSQLDUMP_INCLUDE | $SED_CMD "s/\b$X\b//g"`
  done

}


#####
backup_mysql_do_backup () {
#####

	for DB in $MYSQLDUMP_INCLUDE; do
    BACKUPFILE=$BACKUPLOCATION/$DB.sql
    [[ "$VERBOSE" == "-v" ]] && echo "Backing up $DB into $BACKUPFILE"
    $MYSQLDUMP_CMD $MYSQLDUMP_OPTS $DB > $BACKUPFILE
    let "ERR = ERR + $?"
	done

}


#####
backup_mysql_cleanup () {
#####

  [[ $ARCHIVES_TO_KEEP -eq "0" ]] && return 0

  PATTERN=${ARCHIVEFILE//[0-9]/?}.tgz

  cd $BACKUPLOCATION
  FILES=(`ls -t $PATTERN`)  # Files matching pattern, oldest to newest
  if [ $? -eq 0 ]; then
    # We found some

    FILES=(${FILES[@]})
    for F in ${FILES[@]:$ARCHIVES_TO_KEEP}; do
      [ -w "${F}" ] && rm "${F}"
    done

  else

    echo "cleanup_files: No files match pattern"
    exit 1

  fi

  cd $DIR

}


#####
# The juicy bits
#####

backup_mysql_get_defaults
backup_mysql_parse_opts
backup_mysql_get_list

mkdir -p $BACKUPLOCATION

# back up all the mysql databases into individual files so we can later restore
# them separately if needed
if [[ ERR -ne 0 ]]; then

  echo "Something went wrong"
  exit $ERR

else

  backup_mysql_do_backup

	if [[ ERR -ne 0 ]]; then
	  echo "ERROR creating database dumps: No archive created"
  else
    if [[ ARCHIVE -eq 1 ]]; then
      [[ "$VERBOSE" == "-v" ]] && echo "Creating archive of backups in $BACKUPLOCATION/$ARCHIVEFILE.tgz"
      cd $BACKUPLOCATION
      tar $VERBOSE -czf $ARCHIVEFILE.tgz *.sql
      cd $DIR
    fi
	fi

fi

backup_mysql_cleanup
